/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import principal.OurFonts;
import atomics.Room;
import java.awt.Color;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Geeo
 */
public class RoomsListPanel extends javax.swing.JPanel {

    /**
     * Creates new form ListRooms
     */
    private ArrayList<RoomListItemPanel> roomsItens;

    public RoomsListPanel() {
        initComponents();
        LoadingPanel l = new LoadingPanel("Loading Rooms");
        roomsItens = new ArrayList<RoomListItemPanel>();
        this.roomsListPanelContainer.getViewport().setOpaque(false);
        this.roomsListPanelContainer.setOpaque(false);
        this.lbSalas.setForeground(Color.WHITE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        roomsListPanelContainer = new javax.swing.JScrollPane();
        listContainer = new javax.swing.JPanel();
        lbSalas = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setOpaque(false);

        jPanel1.setOpaque(false);

        roomsListPanelContainer.setBorder(null);
        roomsListPanelContainer.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        roomsListPanelContainer.setOpaque(false);

        listContainer.setOpaque(false);
        listContainer.setLayout(new javax.swing.BoxLayout(listContainer, javax.swing.BoxLayout.Y_AXIS));
        roomsListPanelContainer.setViewportView(listContainer);

        lbSalas.setFont(OurFonts.getTitleFont(24f)
        );
        lbSalas.setText("Rooms");

        jPanel2.setBackground(new java.awt.Color(102, 255, 204));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setFont(OurFonts.getTextFont(14f)
        );
        jTextField1.setToolTipText("Search...");
        jTextField1.setBorder(null);
        jTextField1.setOpaque(false);
        jTextField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1CaretUpdate(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel2.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 200, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/campo_search.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 250, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botao_add_sala.png"))); // NOI18N
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomsListPanelContainer)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 16, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(lbSalas, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbSalas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomsListPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        for (int i = 0; i < roomsItens.size(); i++) {
            if (roomsItens.get(i).getRoom().getName().contains(this.jTextField1.getText())) {
                roomsItens.get(i).setVisible(true);
            } else {
                roomsItens.get(i).setVisible(false);
            }
            this.revalidate();
        }
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1CaretUpdate
        for (int i = 0; i < roomsItens.size(); i++) {
            if (roomsItens.get(i).getRoom().getName().toLowerCase().contains(this.jTextField1.getText().toLowerCase())) {
                roomsItens.get(i).setVisible(true);
            } else {
                roomsItens.get(i).setVisible(false);
            }
            this.revalidate();
        }
    }//GEN-LAST:event_jTextField1CaretUpdate

    private void jLabel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MousePressed
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botao_add_sala_clicked.png"))); // NOI18N// TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MousePressed

    private void jLabel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseReleased
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/botao_add_sala.png"))); // NOI18N
    }//GEN-LAST:event_jLabel2MouseReleased

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
      AddRoom addroomframe = new AddRoom();
        addroomframe.setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbSalas;
    private javax.swing.JPanel listContainer;
    private javax.swing.JScrollPane roomsListPanelContainer;
    // End of variables declaration//GEN-END:variables

    public void refreshExistingRooms(List<Room> rooms) {
        System.out.println("QntRooms" + rooms.size());
        this.listContainer.removeAll();
        if (rooms.size() == 0) {
            NaoExistemRooms nExiste = new NaoExistemRooms();
            nExiste.setVisible(true);
            this.listContainer.add(nExiste);
        } else {
            for (int i = 0; i < rooms.size(); i++) {
                Room r = rooms.get(i);
                RoomListItemPanel r1 = new RoomListItemPanel(r);
                roomsItens.add(r1);
                r1.setVisible(true);
                this.listContainer.add(r1);
                this.listContainer.revalidate();
            }
        }
        revalidate();
    }

    public void refreshUsersCount(long room_id, int add) {
        for (int i = 0; i < roomsItens.size(); i++) {
            if (room_id == roomsItens.get(i).getRoom().getID()) {
                roomsItens.get(i).refreshUsersCount(add);
            }
        }
    }

    void showNewRoomWithoutOpen(Room room) {
        RoomListItemPanel r1 = new RoomListItemPanel(room);
                roomsItens.add(r1);
                r1.setVisible(true);
                this.listContainer.add(r1);
                this.listContainer.revalidate();
        
        
    }
}
