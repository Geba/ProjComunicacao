/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import atomics.Message;
import atomics.Room;
import atomics.User;
import atomics.UserInfo;
import corecliente.Core;
import interfaces.GuiInterface;

import java.awt.FontFormatException;
import java.awt.Label;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JProgressBar;

import corecliente.GlobalClient;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;

import javax.swing.JFileChooser;
import principal.Alerts;
import javax.swing.JOptionPane;

/**
 *
 * @author Geeo
 */
public class GuiPrincipalFrame extends javax.swing.JFrame implements Runnable, GuiInterface {

//    private boolean logado = false;
    private RoomsListPanel roomsPanel;
//    private User user;
    private List<RoomFrame> roomFrameList;
    private LoginPanel l;
    private CabecalhoPanel cb;
    public JOptionPane op;

    /**
     * Creates new form GuiPrincipalFrame
     *
     * @throws IOException
     * @throws FontFormatException
     * @throws FileNotFoundException
     */
    public GuiPrincipalFrame() throws FileNotFoundException, FontFormatException, IOException {
        initComponents();
        this.l = new LoginPanel();
        this.l.setVisible(true);
        this.principalPanel.add(l);
        roomFrameList = new ArrayList<RoomFrame>();
        this.setTitle("Hermes");
    }

    public void run() {
        System.out.println("Heey, Gui running!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BigContainer = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        principalPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 544, 576));
        setMaximumSize(new java.awt.Dimension(440, 670));
        setMinimumSize(new java.awt.Dimension(350, 520));
        setPreferredSize(new java.awt.Dimension(440, 670));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        BigContainer.setBackground(new java.awt.Color(0, 59, 64));
        BigContainer.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setOpaque(false);

        principalPanel.setFocusable(false);
        principalPanel.setOpaque(false);
        principalPanel.setLayout(new javax.swing.BoxLayout(principalPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(principalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        principalPanel.getAccessibleContext().setAccessibleName("");

        BigContainer.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 13, 420, 600));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/tela_salas.png"))); // NOI18N
        jLabel1.setText("jLabel1");
        BigContainer.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 410, 590));

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BigContainer, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(BigContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //System.out.print("xau");
        if (GlobalClient.user != null) {
            GlobalClient.core.logOut();
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiPrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiPrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiPrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiPrincipalFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
//System.out.println("Ooie");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GuiPrincipalFrame().setVisible(true);
                } catch (FileNotFoundException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (FontFormatException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BigContainer;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JPanel principalPanel;
    // End of variables declaration//GEN-END:variables

    public void showNewRoom(Room room, ArrayList<UserInfo> usersinfo) {
        RoomFrame conversa = new RoomFrame(room);
        roomFrameList.add(conversa);
        for (int i = 0; i < usersinfo.size(); i++) {
            conversa.addUser(usersinfo.get(i));
        }
        conversa.setVisible(true);

        this.roomsPanel.refreshUsersCount(room.getID(), 1);
    }

    @Override
    public void showReceivedMessage(Message msg) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void showReceivedSong(Object song) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void showReceivedFile(Object file) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void logInOk() {
        this.setTitle("Hermes  - " + GlobalClient.user.getNickname());
        this.principalPanel.removeAll();
        this.cb = new CabecalhoPanel(GlobalClient.user);
        cb.setVisible(true);
        this.principalPanel.add(cb);
        this.roomsPanel = new RoomsListPanel();
        this.roomsPanel.setVisible(true);
        this.principalPanel.add(roomsPanel);
        GlobalClient.core.refreshRooms();

    }

    public void addRoomFrame(RoomFrame rf) {
        this.roomFrameList.add(rf);
    }

    public void receiveMessage(Message m) {
        for (int i = 0; i < roomFrameList.size(); i++) {
            //System.out.println(roomFrameList.get(i).getID() + " " + m.getSala_ID());
            if (roomFrameList.get(i).getID() == m.getSala_ID()) {
                System.out.println(m.getMessage());
                roomFrameList.get(i).addMensagem(m);
            }
        }
    }

    public void showExistingRooms(ArrayList<Room> existingRooms) {
        System.out.println("Etrou aqui, rooms qnt: " + existingRooms.size());
        this.roomsPanel.refreshExistingRooms(existingRooms);
        this.principalPanel.revalidate();
    }

    public void showOpenedRoom(long id) {
        for (int i = 0; i < roomFrameList.size(); i++) {
            if (id == roomFrameList.get(i).getRoom().getID()) {
                roomFrameList.get(i).toFront();
                i = roomFrameList.size() + 10;
            }
        }
        System.out.println("chamou showOpenRoom");
    }

    public void showNewUser(long sala_ID, String sender_nickname, int newStatus, long sender_id) {
        System.out.println("chamou shownewUSer");
        this.roomsPanel.refreshUsersCount(sala_ID, 1);
        for (int i = 0; i < this.roomFrameList.size(); i++) {
            if (sala_ID == this.roomFrameList.get(i).getID()) {
                this.roomFrameList.get(i).addAlert(Alerts.ENTEREXIT, sender_nickname, Alerts.ENTER);
                UserInfo usr = new UserInfo(sender_nickname, newStatus, sender_id);
                this.roomFrameList.get(i).addUser(usr);
            }
        }
    }

    public void alertSaiuSala(long sala_id, String sender_nickname, long sender_id) {
        //  this.roomsPanel.refreshUsersCount(sala_id, -1);
        for (int i = 0; i < this.roomFrameList.size(); i++) {
            if (sala_id == this.roomFrameList.get(i).getID()) {
                this.roomFrameList.get(i).addAlert(Alerts.ENTEREXIT, sender_nickname, Alerts.EXIT);
                this.roomFrameList.get(i).removeUser(sender_id);
            }
        }

        System.out.println("atualizar a lista de usuarios visiveis na conversa");
    }

    public void alertMudouStatus(ArrayList<Room> existingRooms, long sender_ID, String sender_nickname, int newStatus) {
        System.out.println("AlertMudouStatus: alertar ao usuario a mudanca de status e atualizar a lista de usuarios visiveis na conversa");
        for (int i = 0; i < existingRooms.size(); i++) {
            for (int j = 0; j < roomFrameList.size(); j++) {
                if (roomFrameList.get(j).getID() == existingRooms.get(i).getID()) {
                    roomFrameList.get(j).addAlert(Alerts.STATUS, sender_nickname, newStatus);
                    roomFrameList.get(j).refreshStatus(sender_ID, newStatus);
                }
            }
        }
    }

    void createRoom(String roomName) {
        GlobalClient.core.createRoom(roomName);
    }

    public void refreshActualRooms(Room room) {
        GlobalClient.gui.showNewRoomWithoutOpen(room);

    }

    void sendFile(String caminhoArquivo, RoomFrame rf) {
        System.out.println("Entrou no sendfile");
        alertsendingFile();
        GlobalClient.core.sendFile(caminhoArquivo, rf.getRoom().getID());
        alertfileSent();
    }

    public void alertsendingFile() {
        System.out.println("Entrou no alertSendingfile");
        LoadingPanel lp = new LoadingPanel("Sending File...\n Please wait");
//        GlobalClient.gui.op = new JOptionPane("oojiojiojoijoiji", JOptionPane.INFORMATION_MESSAGE, JOptionPane.DEFAULT_OPTION, null, new Object[]{}, null);;
        GlobalClient.gui.op = new JOptionPane();
        GlobalClient.gui.op.showMessageDialog(this,new LoadingPanel("Uploading File"));
        GlobalClient.gui.op.setVisible(true);
        final JDialog dialog = new JDialog();
        dialog.setTitle("Message");
        dialog.setModal(true);
        dialog.setContentPane(GlobalClient.gui.op);
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        dialog.pack();
        
    }

    public void showNewFile(String fileName, String sender_nickname, long sala_ID, String hora,
            long fileLink) {
        System.out.println("entrou no show new file (gui principal)");
        for (int i = 0; i < roomFrameList.size(); i++) {
            //System.out.println(roomFrameList.get(i).getID() + " " + m.getSala_ID());
            if (roomFrameList.get(i).getID() == sala_ID) {
                roomFrameList.get(i).addFile(fileName, sender_nickname, hora, fileLink);
            }
        }
    }

    void logIn(String nickname, int i, String ip, int status) {
        try {
            GlobalClient.core.logIn(nickname, 0, ip, status);

        } catch (IOException ex) {
            Logger.getLogger(GuiPrincipalFrame.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    void requestEnterRoom(Room room) {
        try {
            GlobalClient.core.requestEnterRoom(room);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    void changeStatus(int newStatus) {
        System.out.println("change status na gui");
        GlobalClient.core.mudarStatus(newStatus);
    }

    public void refreshUserCountGui(long sala_id, int add) {
        System.out.println("refreshusercount " + sala_id);
        this.roomsPanel.refreshUsersCount(sala_id, add);
    }

    private void showNewRoomWithoutOpen(Room room) {
        this.roomsPanel.showNewRoomWithoutOpen(room);
        this.roomsPanel.revalidate();
    }

    public String getPathForFile() {
        String caminhoArquivo = "";
        JFileChooser arquivo = new JFileChooser();
        arquivo.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retorno = arquivo.showOpenDialog(null);
        if (retorno == JFileChooser.APPROVE_OPTION) {
            caminhoArquivo = arquivo.getSelectedFile().getAbsolutePath();
            return caminhoArquivo;
        } else {
            return null;
        }

    }

    private void alertfileSent() {

    }

    @Override
    public void showNewRoom(Room room) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
